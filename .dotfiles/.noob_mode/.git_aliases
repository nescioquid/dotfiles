# GIT_ALIASES

## instructions

#    to include these aliases in your linux environment (WSL, WSL2, Ubuntu, Debian etc):
# 1) add this file to your home directory, so that it's located at `~/.git_aliases`
# 2) add the following line of code (besides the hashtag [#]) to the bottom of your `.bashrc` file,
#    located at `~/.bashrc`:

#    source $HOME/.git_aliases

#    which will make it so that this file gets automatically sourced whenever you open your terminal
# 3) exit out of your terminal and open up a new one
# 4) that's it! to confirm this file has been sourced correctly, try running `thanksquegg`
#    you should get a message that says "you are so welcome!"
#    if you do, you did everything right! congrats!
#    give yourself a pat on the back. savor it.
# 5) take a moment to configure the interface below to your needs,
#    as some commands will not work properly without configuration
# 6) try out some of the aliases below in your own repo
# 7) see the bottom of this file to learn about creating your own custom aliases

# ---

## interface

# is the primary branch of your repo named 'main' or 'master'?
# uncomment whichever is right for you, comment out the other
TRUNK='main'
# TRUNK='master'

# what are you calling the branch in your repo that you use for development?
# uncomment whichever is right for you, comment out the rest
DEV='dev'
# DEV='devel'
# DEV='develop'
# DEV='development'

# opens this file in your terminal editor
alias git_aliases='${EDITOR} ~/.git_aliases'

# opens this file in nano, a simple terminal editor
alias ngit_aliases='nano ~/.git_aliases'

# opens this file in notepad
# assumes you're using Windows
alias npgit_aliases='np ~/.git_aliases'

# opens this file in VS Code
# assumes you're using VS Code
alias vscgit_aliases='code ~/.git_aliases'

# sources (updates/reinitializes) your `.bashrc` file, which in turn sources this file
# assumes you've placed it in your home directory, so that it's located at `~/.git_aliases`
alias srcg='source ~/.git_aliases && echo hey, you sourced .git_aliases, yay!'

# ---

## common git commands, just shorter

# now you can type `g` instead of `git`, because nobody has time for 'it' hehe :D
alias g='git'

# a faster way to get to the manual pages for whatever git things you're learning about
# instead of running `man git-branch` for instance, now you can run `ghelp branch`
alias ghelp='ghelp() { man git-"$1"; }; ghelp'

# add
alias ga='git add -v'
alias gaa='git add -v --all'

# branch
alias gb='git branch'
alias gbb='git branch -vv'
alias gba='git branch --all'
alias gbba='git branch -vv --all'
alias gbm='git branch --move'

# cherry-pick
alias gcp='git cherry-pick'
alias gcpa='git cherry-pick --abort'
alias gcpc='git cherry-pick --continue'

# commit
alias gc='git commit -v'
alias 'gc!'='git commit -v --amend'
alias gcm='git commit -v --message'
alias gcam='git commit -v --all --message'
alias gcmdr='git commit -v --dry-run --message'
alias gcamdr='git commit -v --dry-run --all --message'

# config
alias gcf='git config --list'
alias gcfg='git config --list --global'

# diff
alias gd='git diff'
alias gds='git diff --staged'

# log
alias glog='git log --oneline --decorate --graph'
alias glogg='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'\'' --stat'
alias glogp='git log --stat --patch'
alias gloga='git log --oneline --decorate --graph --all'

# merge
alias gm='git merge -v'
alias gma='git merge --abort'
alias gmne='git merge --no-edit'

# pull
alias gpll='git pull -v'
alias gplldr='git pull -v --dry-run'

# push
alias gpsh='git push -v'
alias gpshdr='git push -v --dry-run'

# rebase
alias grb='git rebase'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'

# reflog
alias grlog='git reflog'

# remote
alias gr='git remote -v'
alias gra='git remote add'

# reset
alias grst='git reset'

# restore
alias grstr='git restore'

# status
alias gstat='git status'

# switch
alias gsw='git switch'

# ---

## utilities

# creates a new branch
# pass in the name of the new branch
alias gcreate='git switch --create'

# switches to the last branch that you were on
alias glast='git switch -'

# clears out the working tree entirely, except for already staged (added) changes
# assumes you're at the base directory of your repo
alias gclear='git restore . && git clean -df'

# basically uncommits one or more commits, leaving their changes in the working tree
# defaults to one commit, pass in '2', '3', etc to uncommit more than one
alias gback='gback() { git reset --mixed HEAD~"$1"; }; gback'

# diffs a given commit with the commit just before it
# defaults to the commit where the HEAD is pointing
# pass in the hash of the commit you want to see the diff of
alias gdd='gdd() { if [ $1 ]; then git diff "$1"~1 "$1"; else git diff HEAD~1 HEAD; fi }; gdd'

# my preferred git-status
# alias gist='git status --short --branch'

# fetches the last commits in which the specified label appears --Lunos
# takes a label for the first argument, number of commits to output as the second
alias glunos='glunos() { git log -n "$2" -S "$1"; }; glunos'

# logs the branch that you use for development
alias glogd='git log --oneline --decorate --graph ${DEV}'

# logs the main/master branch
alias glogm='git log --oneline --decorate --graph ${TRUNK}'

# logs a branch at origin
# pass in the name of the branch
alias glogo='glogo() { git log --oneline --decorate --graph origin/"$1"; }; glogo'

# switches to the branch that you use for development
alias gswd='git switch ${DEV}'

# switches to the main/master branch
alias gswm='git switch ${TRUNK}'

# ---

## manages associations between local and remote branches at origin

# creates an upstream branch at origin associated with the current local branch
# pass in the name of the new origin branch
# (you probably want the same name as the current local branch)
alias gsetup='git push -v --set-upstream origin'

# associates the current local branch with an already existing upstream branch at origin
# pass in the name of the already existing upstrean branch at origin
# (you probably want the same name as the current local branch)
alias gset='gset() { git branch --set-upstream-to=origin/"$1"; }; gset'

# unsets the association between the current local branch and its upstream branch
alias gunset='git branch --unset-upstream && echo hey, it looks like you unset that upstream branch'

# ---

## temporary branch functionality
## these features allow you to manage a branch 'temp' that you can use to store temporary changes to your code,
## like when testing out two versions of a feature, or when cherry-picking

# creates a new branch 'temp'
alias gbnt='git switch --create temp'

# deletes branch 'temp'
alias gbdt='git branch -df temp'

# logs branch 'temp'
alias glogt='git log --oneline --decorate --graph temp'

# switches to branch 'temp'
alias gswt='git switch temp'

# automatically deletes any previous branch 'temp' and creates new a one
# choose your preferred functionality:
# this one leaves you in the 'temp' branch
alias gtemp='gtemp() { if git rev-parse --quiet --verify temp; then git branch -df temp && git switch --create temp; else git switch --create temp; fi }; gtemp'
# while this one brings you back to the branch you created it from
# alias gtemp='gtemp() { if git rev-parse --quiet --verify temp; then gb -df temp; gsw --create temp; gsw -; else gsw --create temp; gsw -; fi }; gtemp'

# ---

## oh-my-zsh's work in progress (wip) functionality
## these features allow you to pause developing one branch and switch to another one ('Work in Progress', or 'wip')
## when you want to go back to work, just 'unwip' it

# commit wip branch
alias gwip='gwip() { git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message "--wip-- [skip ci]"; }; gwip'

# uncommit wip branch
alias gunwip='gunwip() { git rev-list --max-count=1 --format="%s" HEAD | grep -q "\--wip--" && git reset HEAD~1; }; gunwip'

# ---

## got a need for speed? these are even shorter versions of some of the aliases above
## just uncomment and enjoy!

# alias gl='glog'
# alias gll='glogg'
# alias glp='glogp'
# alias gla='gloga'
# alias gs='gsw'
# alias gsl='glast'
# alias gclr='gclear'
# alias gld='glogd'
# alias glm='glogm'
# alias glo='glogo'
# alias gsd='gswd'
# alias gsm='gswm'
# alias glt='glogt'
# alias gst='gswt'

# ---

## add your own aliases here!

# this example prints 'you are so welcome!' when you call it, try it out!
alias thanksqueggs='echo you are so welcome!'

# want to give another name to any of the aliases above? it's easy! just make another alias!
# this example aliases the name 'grename' to `gbm`, which is in turn an alias of `git branch --move`
# just in case you'd like a more verbose name to remember this part of git-branch's functionality by
alias grename='gbm'

# this example takes the opposite approach
# it takes a verbose command, `gcreate`, an alias of `git switch --create`,
# and makes it seem as if it's an extension of git-branch
alias gbn='gcreate'

# ---

alias poke='cd ~/repos/pokeemerald'
