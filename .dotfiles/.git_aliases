# GIT_ALIASES

# note: assumes oh-my-zsh's git plugin is enabled

# a faster way to get to the man pages for whatever git things you're learning about
alias ghelp='ghelp() { man git-"$1"; }; ghelp'

# experimenting with swapping default behaviors with temp commands
alias glt='glogtt'
alias gltt='glogt'

# short forms
alias gl='glog'
alias gll='glogg'
alias gla='gloga'
alias glp='glogp'
alias glpp='glogpp'
alias gs='gsw'

alias gld='glogd'
alias glm='glogm'
alias glo='glogo'
alias gloo='glogoo'
# alias glt='glogt'
# alias gltt='glogtt'
alias glot='glogot'

alias gsd='gswd'
alias gsl='gswl'
alias gsm='gswm'
alias gst='gswt'

alias gun='gunwip'
alias guna='gunwipall'

# combination of 'gloo' and 'gltt'
alias glogot='glog $(git_current_branch) origin/$(git_current_branch) temp'

# combination of 'gaa' and 'gca'
alias gcaa='git add -v --all && git commit -v --all'

# combination of 'gaa' and 'grbc'
alias gaarbc='gaa && grbc'


# ---

# common commands

# add
alias ga='git add -v'
alias gaa='git add -v --all'

# branch
alias gb='git branch -vv'
alias gbb='git branch -vv'
alias gba='git branch -vv --all'
alias gbba='git branch -vv --all'

# checkout
alias gcod='git checkout $(git_develop_branch)'
alias gcom='git checkout $(git_main_branch)'

# commit
alias gcm='git commit -v --message'
alias gcam='git commit -v --all --message'
alias gcmdr='git commit -v --dry-run --message'
alias gcamdr='git commit -v --dry-run --all --message'

# config
alias gcfg='git config --list --global'

# log
alias glog='git log --oneline --decorate --graph'
alias glogg='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'\'' --stat' # 'glols' in zsh
alias glogp='git log --stat --patch' # 'glgp' in zsh

# merge
alias gm='git merge -v'
alias gmne='git merge --no-edit'

# pull
alias gpll='git pull -v'
alias gplldr='git pull -v --dry-run'

# push
alias gpsh='git push -v'
alias gpshdr='git push -v --dry-run'
# alias gpsho='git push -v origin'

# rebase
alias grb='git rebase'
alias grba='git rebase --abort'

# reflog
alias grlog='git reflog'

# remote
alias gr='git remote -v'

# reset
alias grst='git reset'

# restore
alias grstr='git restore'

# status
alias gstat='git status --short --branch'
alias gist='git status --short --branch'

# tag
alias gt='git tag'

# ---

# utilities

# creates a new branch
alias gcreate='git switch --create'
alias gbc='git switch --create'
alias gbn='git switch --create'

# switches to the last branch that you were on
alias glast='git switch -'
alias gswl='git switch -'

# clears out the working tree entirely, except for already staged (added) changes
# assumes you're at the base directory of your repo
alias gclear='git restore . && git clean -df'
alias gclr='git restore . && git clean -df'

# cleans up any unused remote branches
# alias grclean='git remote -v update origin --prune'

# basically uncommits one or more commits, leaving their changes in the working tree
alias gback='gback() { git reset HEAD~"$1" }; gback'

# same as 'gback' but removes all changes from the working tree
alias gbuck='gbuck() { git reset --hard HEAD~"$1" }; gbuck'

# diffs a given commit with the commit just before it
# defaults to the commit where the HEAD is pointing
alias gdd='gdd() { if [ $1 ]; then git diff "$1"~1 "$1"; else git diff HEAD~1 HEAD; fi }; gdd'

# diffs a commit with the commit just before it
# defaults to the commit where the HEAD is pointing
# takes in a number for the amount of commits prior to HEAD
alias gdh='gdh() { if [ $1 ]; then n=$1; git diff HEAD~$((n)) HEAD~$((n-1)); else git diff HEAD~1 HEAD; fi }; gdh'

# logs the branches that you use for development
# defaults to the dev branch, pass in a string for any 'dev-[string]' branch
alias glogd='glogd() { if [ $1 ]; then glog $(git_develop_branch)-"$1"; else glog $(git_develop_branch); fi }; glogd'

# logs the main/master branch
alias glogm='glog $(git_main_branch)'

# logs a branch at origin
# defaults to the branch at origin associated with the current local branch
alias glogo='glogo() { if [ $1 ]; then glog origin/"$1"; else glog origin/$(git_current_branch); fi }; glogo'

# logs a branch and its associated branch at origin
# defaults to the current local branch and its associated branch at origin
alias glogoo='glogoo() { if [ $1 ]; then glog "$1" origin/"$1"; else glog $(git_current_branch) origin/$(git_current_branch); fi }; glogoo'

# glogp but for only a single commit, like a diff
alias glogpp='glpp() { if [ $1 ]; then git log --stat --patch --max-count=1 "$1"; else git log --stat --patch --max-count=1 HEAD; fi }; glpp'

# switches to the branches that you use for development
# defaults to the dev branch, pass in a string for any 'dev-[string]' branch
alias gswd='gswd() { if [ $1 ]; then git switch $(git_develop_branch)-"$1"; else git switch $(git_develop_branch); fi }; gswd'

# starts an interactive rebase from a certain number of commits before the HEAD
alias grbii='grbii() { git rebase --interactive HEAD~"$1" }; grbii'

# creates a branch at origin
alias gbno='gbno() { git push -v origin HEAD:refs/heads/"$1"; }; gbno'

# deletes a branch at origin
alias gbdo='git push -v origin --delete'


# ---

# from others

# fetches the last commits in which the specified label appears --Lunos
# takes a label for the first argument, number of commits to output as the second
alias glunos='glunos() { git log --max-count="$2" -S "$1"; }; glunos'

# ---

# manages associations between local and remote branches at origin

# creates an upstream branch at origin associated with the current local branch
alias gsetup='git push -v --set-upstream origin $(git_current_branch)'

# associates the current local branch with an already existing upstream branch at origin
alias gset='git branch --set-upstream-to=origin/$(git_current_branch)'

# unsets the association between the current local branch and its upstream branch
alias gunset='gb --unset-upstream && echo hey, it looks like you unset that upstream branch'

# ---

# temporary branch functionality
# these features allow you to manage a branch 'temp' that you can use to store temporary changes to your code

# creates a new branch 'temp'
alias gbnt='git switch --create temp'

# deletes branch 'temp'
alias gbdt='gb -df temp'
alias gtempd='gb -df temp'

# logs branch 'temp'
alias glogt='glog temp'

# logs the current local branch and branch 'temp'
alias glogtt='glog $(git_current_branch) temp'

# switches to branch 'temp'
alias gswt='git switch temp'

# automatically deletes any previous branch 'temp' and creates new a one
alias gtemp='gtemp() { if git rev-parse --quiet --verify temp; then gb -df temp; git switch --create temp; git switch -; else git switch --create temp; git switch -; fi }; gtemp'

# same as 'gtemp', but leaves you in the 'temp' branch
alias gtempn='gtempn() { if git rev-parse --quiet --verify temp; then gb -df temp; git switch --create temp; else git switch --create temp; fi }; gtempn'

# ---

# safeguards
alias gbd='echo hey! that command is intentionally blocked, use \`git branch -d\` instead'
alias gbD='echo hey! that command is intentionally blocked, use \`git branch -df\` or \`git branch -D\` instead'
alias gbda='echo hey! that command is intentionally blocked, edit git aliases to unblock it'
alias gbds='echo hey! that command is intentionally blocked, edit git aliases to unblock it'
alias gbdo='echo hey! that command is intentionally blocked, edit git aliases to unblock it'
alias ggf='echo hey! that command is intentionally blocked, use \`git push --force origin $(current_branch\` instead)'
alias gp='echo hey! that command is intentionally blocked, use \`git push\` instead'
alias 'gpf!'='echo hey! that command is intentionally blocked, use \`git push --force\` instead'
alias gpod='echo hey! that command is intentionally blocked, use \`git push origin -d\` instead'
alias gpristine='echo hey! that command is intentionally blocked, use \`git reset --hard && git clean --force -dfx\` instead'
alias grhh='echo hey! that command is intentionally blocked, use \`git reset --hard\` instead'
alias groh='echo hey! that command is intentionally blocked, use \`git reset origin/$(git_current_branch) --hard\` instead'
